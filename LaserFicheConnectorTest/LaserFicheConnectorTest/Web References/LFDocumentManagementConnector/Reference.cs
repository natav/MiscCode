//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace LaserFicheConnectorTest.LFDocumentManagementConnector {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LSDocumentManagementConnectorSoap", Namespace="http://mccinnovations.com/LSDMCWebService")]
    public partial class LSDocumentManagementConnector : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ValidateCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntriesFromParentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetDocumentFromDMOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetDocumentFromDMOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSDeleteDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFieldByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTemplateByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTemplateByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFieldByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetAllFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetFieldsByTemplateNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetFieldsByTemplateIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSGetAllTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDMImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDMImageAppendOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDMOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDMImage_FileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDMImageAppend_FileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSArchiveMeetingToDM_FileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSDeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSUploadFileChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSImportImagesFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSImportImagesFromFileAppendOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSAppendImagesFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSImportEdocFromFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback LSDocumentLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentExtensionByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentEntryTypeByPathOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LSDocumentManagementConnector() {
            this.Url = global::LaserFicheConnectorTest.Properties.Settings.Default.LaserFicheConnectorTest_LFDocumentManagementConnector_LSDocumentManagementConnector;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidateCredentialsCompletedEventHandler ValidateCredentialsCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event GetRepositoryInfoCompletedEventHandler GetRepositoryInfoCompleted;
        
        /// <remarks/>
        public event GetEntriesFromParentCompletedEventHandler GetEntriesFromParentCompleted;
        
        /// <remarks/>
        public event LSGetDocumentFromDMOldCompletedEventHandler LSGetDocumentFromDMOldCompleted;
        
        /// <remarks/>
        public event LSGetDocumentFromDMCompletedEventHandler LSGetDocumentFromDMCompleted;
        
        /// <remarks/>
        public event LSDeleteDocumentCompletedEventHandler LSDeleteDocumentCompleted;
        
        /// <remarks/>
        public event UpdateFieldByNameCompletedEventHandler UpdateFieldByNameCompleted;
        
        /// <remarks/>
        public event UpdateTemplateByNameCompletedEventHandler UpdateTemplateByNameCompleted;
        
        /// <remarks/>
        public event UpdateTemplateByIDCompletedEventHandler UpdateTemplateByIDCompleted;
        
        /// <remarks/>
        public event UpdateFieldByIDCompletedEventHandler UpdateFieldByIDCompleted;
        
        /// <remarks/>
        public event LSGetAllFieldsCompletedEventHandler LSGetAllFieldsCompleted;
        
        /// <remarks/>
        public event LSGetFieldsByTemplateNameCompletedEventHandler LSGetFieldsByTemplateNameCompleted;
        
        /// <remarks/>
        public event LSGetFieldsByTemplateIDCompletedEventHandler LSGetFieldsByTemplateIDCompleted;
        
        /// <remarks/>
        public event LSGetAllTemplatesCompletedEventHandler LSGetAllTemplatesCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDMImageCompletedEventHandler LSArchiveMeetingToDMImageCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDMImageAppendCompletedEventHandler LSArchiveMeetingToDMImageAppendCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDMCompletedEventHandler LSArchiveMeetingToDMCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDMImage_FileCompletedEventHandler LSArchiveMeetingToDMImage_FileCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDMImageAppend_FileCompletedEventHandler LSArchiveMeetingToDMImageAppend_FileCompleted;
        
        /// <remarks/>
        public event LSArchiveMeetingToDM_FileCompletedEventHandler LSArchiveMeetingToDM_FileCompleted;
        
        /// <remarks/>
        public event LSDeleteFileCompletedEventHandler LSDeleteFileCompleted;
        
        /// <remarks/>
        public event LSUploadFileChunkCompletedEventHandler LSUploadFileChunkCompleted;
        
        /// <remarks/>
        public event LSImportImagesFromFileCompletedEventHandler LSImportImagesFromFileCompleted;
        
        /// <remarks/>
        public event LSImportImagesFromFileAppendCompletedEventHandler LSImportImagesFromFileAppendCompleted;
        
        /// <remarks/>
        public event LSAppendImagesFromFileCompletedEventHandler LSAppendImagesFromFileCompleted;
        
        /// <remarks/>
        public event LSImportEdocFromFileCompletedEventHandler LSImportEdocFromFileCompleted;
        
        /// <remarks/>
        public event LSDocumentLinkCompletedEventHandler LSDocumentLinkCompleted;
        
        /// <remarks/>
        public event GetDocumentExtensionByIDCompletedEventHandler GetDocumentExtensionByIDCompleted;
        
        /// <remarks/>
        public event GetDocumentEntryTypeByPathCompletedEventHandler GetDocumentEntryTypeByPathCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/ValidateCredentials", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message ValidateCredentials(string user, string pass) {
            object[] results = this.Invoke("ValidateCredentials", new object[] {
                        user,
                        pass});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCredentialsAsync(string user, string pass) {
            this.ValidateCredentialsAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void ValidateCredentialsAsync(string user, string pass, object userState) {
            if ((this.ValidateCredentialsOperationCompleted == null)) {
                this.ValidateCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCredentialsOperationCompleted);
            }
            this.InvokeAsync("ValidateCredentials", new object[] {
                        user,
                        pass}, this.ValidateCredentialsOperationCompleted, userState);
        }
        
        private void OnValidateCredentialsOperationCompleted(object arg) {
            if ((this.ValidateCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCredentialsCompleted(this, new ValidateCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/DownloadFile", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadFile(string remoteUri, string fileNameToSave) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        remoteUri,
                        fileNameToSave});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string remoteUri, string fileNameToSave) {
            this.DownloadFileAsync(remoteUri, fileNameToSave, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string remoteUri, string fileNameToSave, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        remoteUri,
                        fileNameToSave}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/GetRepositoryInfo", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRepositoryInfo() {
            object[] results = this.Invoke("GetRepositoryInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoryInfoAsync() {
            this.GetRepositoryInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetRepositoryInfoAsync(object userState) {
            if ((this.GetRepositoryInfoOperationCompleted == null)) {
                this.GetRepositoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryInfoOperationCompleted);
            }
            this.InvokeAsync("GetRepositoryInfo", new object[0], this.GetRepositoryInfoOperationCompleted, userState);
        }
        
        private void OnGetRepositoryInfoOperationCompleted(object arg) {
            if ((this.GetRepositoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoryInfoCompleted(this, new GetRepositoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/GetEntriesFromParent", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Entry[] GetEntriesFromParent(string ParentFolderPath, string user, string pass) {
            object[] results = this.Invoke("GetEntriesFromParent", new object[] {
                        ParentFolderPath,
                        user,
                        pass});
            return ((Entry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEntriesFromParentAsync(string ParentFolderPath, string user, string pass) {
            this.GetEntriesFromParentAsync(ParentFolderPath, user, pass, null);
        }
        
        /// <remarks/>
        public void GetEntriesFromParentAsync(string ParentFolderPath, string user, string pass, object userState) {
            if ((this.GetEntriesFromParentOperationCompleted == null)) {
                this.GetEntriesFromParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntriesFromParentOperationCompleted);
            }
            this.InvokeAsync("GetEntriesFromParent", new object[] {
                        ParentFolderPath,
                        user,
                        pass}, this.GetEntriesFromParentOperationCompleted, userState);
        }
        
        private void OnGetEntriesFromParentOperationCompleted(object arg) {
            if ((this.GetEntriesFromParentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntriesFromParentCompleted(this, new GetEntriesFromParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetDocumentFromDMOld", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] LSGetDocumentFromDMOld(string path, string user, string pass) {
            object[] results = this.Invoke("LSGetDocumentFromDMOld", new object[] {
                        path,
                        user,
                        pass});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetDocumentFromDMOldAsync(string path, string user, string pass) {
            this.LSGetDocumentFromDMOldAsync(path, user, pass, null);
        }
        
        /// <remarks/>
        public void LSGetDocumentFromDMOldAsync(string path, string user, string pass, object userState) {
            if ((this.LSGetDocumentFromDMOldOperationCompleted == null)) {
                this.LSGetDocumentFromDMOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetDocumentFromDMOldOperationCompleted);
            }
            this.InvokeAsync("LSGetDocumentFromDMOld", new object[] {
                        path,
                        user,
                        pass}, this.LSGetDocumentFromDMOldOperationCompleted, userState);
        }
        
        private void OnLSGetDocumentFromDMOldOperationCompleted(object arg) {
            if ((this.LSGetDocumentFromDMOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetDocumentFromDMOldCompleted(this, new LSGetDocumentFromDMOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetDocumentFromDM", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] LSGetDocumentFromDM(string path, string user, string pass) {
            object[] results = this.Invoke("LSGetDocumentFromDM", new object[] {
                        path,
                        user,
                        pass});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetDocumentFromDMAsync(string path, string user, string pass) {
            this.LSGetDocumentFromDMAsync(path, user, pass, null);
        }
        
        /// <remarks/>
        public void LSGetDocumentFromDMAsync(string path, string user, string pass, object userState) {
            if ((this.LSGetDocumentFromDMOperationCompleted == null)) {
                this.LSGetDocumentFromDMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetDocumentFromDMOperationCompleted);
            }
            this.InvokeAsync("LSGetDocumentFromDM", new object[] {
                        path,
                        user,
                        pass}, this.LSGetDocumentFromDMOperationCompleted, userState);
        }
        
        private void OnLSGetDocumentFromDMOperationCompleted(object arg) {
            if ((this.LSGetDocumentFromDMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetDocumentFromDMCompleted(this, new LSGetDocumentFromDMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSDeleteDocument", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSDeleteDocument(string path, string user, string pass) {
            object[] results = this.Invoke("LSDeleteDocument", new object[] {
                        path,
                        user,
                        pass});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSDeleteDocumentAsync(string path, string user, string pass) {
            this.LSDeleteDocumentAsync(path, user, pass, null);
        }
        
        /// <remarks/>
        public void LSDeleteDocumentAsync(string path, string user, string pass, object userState) {
            if ((this.LSDeleteDocumentOperationCompleted == null)) {
                this.LSDeleteDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSDeleteDocumentOperationCompleted);
            }
            this.InvokeAsync("LSDeleteDocument", new object[] {
                        path,
                        user,
                        pass}, this.LSDeleteDocumentOperationCompleted, userState);
        }
        
        private void OnLSDeleteDocumentOperationCompleted(object arg) {
            if ((this.LSDeleteDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSDeleteDocumentCompleted(this, new LSDeleteDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/UpdateFieldByName", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message UpdateFieldByName(string user, string pass, string templateFieldName, int docId, object value) {
            object[] results = this.Invoke("UpdateFieldByName", new object[] {
                        user,
                        pass,
                        templateFieldName,
                        docId,
                        value});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFieldByNameAsync(string user, string pass, string templateFieldName, int docId, object value) {
            this.UpdateFieldByNameAsync(user, pass, templateFieldName, docId, value, null);
        }
        
        /// <remarks/>
        public void UpdateFieldByNameAsync(string user, string pass, string templateFieldName, int docId, object value, object userState) {
            if ((this.UpdateFieldByNameOperationCompleted == null)) {
                this.UpdateFieldByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFieldByNameOperationCompleted);
            }
            this.InvokeAsync("UpdateFieldByName", new object[] {
                        user,
                        pass,
                        templateFieldName,
                        docId,
                        value}, this.UpdateFieldByNameOperationCompleted, userState);
        }
        
        private void OnUpdateFieldByNameOperationCompleted(object arg) {
            if ((this.UpdateFieldByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFieldByNameCompleted(this, new UpdateFieldByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/UpdateTemplateByName", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message UpdateTemplateByName(string user, string pass, string templatedName, int docId) {
            object[] results = this.Invoke("UpdateTemplateByName", new object[] {
                        user,
                        pass,
                        templatedName,
                        docId});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTemplateByNameAsync(string user, string pass, string templatedName, int docId) {
            this.UpdateTemplateByNameAsync(user, pass, templatedName, docId, null);
        }
        
        /// <remarks/>
        public void UpdateTemplateByNameAsync(string user, string pass, string templatedName, int docId, object userState) {
            if ((this.UpdateTemplateByNameOperationCompleted == null)) {
                this.UpdateTemplateByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemplateByNameOperationCompleted);
            }
            this.InvokeAsync("UpdateTemplateByName", new object[] {
                        user,
                        pass,
                        templatedName,
                        docId}, this.UpdateTemplateByNameOperationCompleted, userState);
        }
        
        private void OnUpdateTemplateByNameOperationCompleted(object arg) {
            if ((this.UpdateTemplateByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemplateByNameCompleted(this, new UpdateTemplateByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/UpdateTemplateByID", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message UpdateTemplateByID(string user, string pass, int templateID, int docId) {
            object[] results = this.Invoke("UpdateTemplateByID", new object[] {
                        user,
                        pass,
                        templateID,
                        docId});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTemplateByIDAsync(string user, string pass, int templateID, int docId) {
            this.UpdateTemplateByIDAsync(user, pass, templateID, docId, null);
        }
        
        /// <remarks/>
        public void UpdateTemplateByIDAsync(string user, string pass, int templateID, int docId, object userState) {
            if ((this.UpdateTemplateByIDOperationCompleted == null)) {
                this.UpdateTemplateByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemplateByIDOperationCompleted);
            }
            this.InvokeAsync("UpdateTemplateByID", new object[] {
                        user,
                        pass,
                        templateID,
                        docId}, this.UpdateTemplateByIDOperationCompleted, userState);
        }
        
        private void OnUpdateTemplateByIDOperationCompleted(object arg) {
            if ((this.UpdateTemplateByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemplateByIDCompleted(this, new UpdateTemplateByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/UpdateFieldByID", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message UpdateFieldByID(string user, string pass, int templateFieldID, int docId, string value) {
            object[] results = this.Invoke("UpdateFieldByID", new object[] {
                        user,
                        pass,
                        templateFieldID,
                        docId,
                        value});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFieldByIDAsync(string user, string pass, int templateFieldID, int docId, string value) {
            this.UpdateFieldByIDAsync(user, pass, templateFieldID, docId, value, null);
        }
        
        /// <remarks/>
        public void UpdateFieldByIDAsync(string user, string pass, int templateFieldID, int docId, string value, object userState) {
            if ((this.UpdateFieldByIDOperationCompleted == null)) {
                this.UpdateFieldByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFieldByIDOperationCompleted);
            }
            this.InvokeAsync("UpdateFieldByID", new object[] {
                        user,
                        pass,
                        templateFieldID,
                        docId,
                        value}, this.UpdateFieldByIDOperationCompleted, userState);
        }
        
        private void OnUpdateFieldByIDOperationCompleted(object arg) {
            if ((this.UpdateFieldByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFieldByIDCompleted(this, new UpdateFieldByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetAllFields", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Field[] LSGetAllFields(string user, string pass) {
            object[] results = this.Invoke("LSGetAllFields", new object[] {
                        user,
                        pass});
            return ((Field[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetAllFieldsAsync(string user, string pass) {
            this.LSGetAllFieldsAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void LSGetAllFieldsAsync(string user, string pass, object userState) {
            if ((this.LSGetAllFieldsOperationCompleted == null)) {
                this.LSGetAllFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetAllFieldsOperationCompleted);
            }
            this.InvokeAsync("LSGetAllFields", new object[] {
                        user,
                        pass}, this.LSGetAllFieldsOperationCompleted, userState);
        }
        
        private void OnLSGetAllFieldsOperationCompleted(object arg) {
            if ((this.LSGetAllFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetAllFieldsCompleted(this, new LSGetAllFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetFieldsByTemplateName", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Field[] LSGetFieldsByTemplateName(string user, string pass, string templateName) {
            object[] results = this.Invoke("LSGetFieldsByTemplateName", new object[] {
                        user,
                        pass,
                        templateName});
            return ((Field[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetFieldsByTemplateNameAsync(string user, string pass, string templateName) {
            this.LSGetFieldsByTemplateNameAsync(user, pass, templateName, null);
        }
        
        /// <remarks/>
        public void LSGetFieldsByTemplateNameAsync(string user, string pass, string templateName, object userState) {
            if ((this.LSGetFieldsByTemplateNameOperationCompleted == null)) {
                this.LSGetFieldsByTemplateNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetFieldsByTemplateNameOperationCompleted);
            }
            this.InvokeAsync("LSGetFieldsByTemplateName", new object[] {
                        user,
                        pass,
                        templateName}, this.LSGetFieldsByTemplateNameOperationCompleted, userState);
        }
        
        private void OnLSGetFieldsByTemplateNameOperationCompleted(object arg) {
            if ((this.LSGetFieldsByTemplateNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetFieldsByTemplateNameCompleted(this, new LSGetFieldsByTemplateNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetFieldsByTemplateID", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Field[] LSGetFieldsByTemplateID(string user, string pass, int ID) {
            object[] results = this.Invoke("LSGetFieldsByTemplateID", new object[] {
                        user,
                        pass,
                        ID});
            return ((Field[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetFieldsByTemplateIDAsync(string user, string pass, int ID) {
            this.LSGetFieldsByTemplateIDAsync(user, pass, ID, null);
        }
        
        /// <remarks/>
        public void LSGetFieldsByTemplateIDAsync(string user, string pass, int ID, object userState) {
            if ((this.LSGetFieldsByTemplateIDOperationCompleted == null)) {
                this.LSGetFieldsByTemplateIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetFieldsByTemplateIDOperationCompleted);
            }
            this.InvokeAsync("LSGetFieldsByTemplateID", new object[] {
                        user,
                        pass,
                        ID}, this.LSGetFieldsByTemplateIDOperationCompleted, userState);
        }
        
        private void OnLSGetFieldsByTemplateIDOperationCompleted(object arg) {
            if ((this.LSGetFieldsByTemplateIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetFieldsByTemplateIDCompleted(this, new LSGetFieldsByTemplateIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSGetAllTemplates", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Template[] LSGetAllTemplates(string user, string pass) {
            object[] results = this.Invoke("LSGetAllTemplates", new object[] {
                        user,
                        pass});
            return ((Template[])(results[0]));
        }
        
        /// <remarks/>
        public void LSGetAllTemplatesAsync(string user, string pass) {
            this.LSGetAllTemplatesAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void LSGetAllTemplatesAsync(string user, string pass, object userState) {
            if ((this.LSGetAllTemplatesOperationCompleted == null)) {
                this.LSGetAllTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSGetAllTemplatesOperationCompleted);
            }
            this.InvokeAsync("LSGetAllTemplates", new object[] {
                        user,
                        pass}, this.LSGetAllTemplatesOperationCompleted, userState);
        }
        
        private void OnLSGetAllTemplatesOperationCompleted(object arg) {
            if ((this.LSGetAllTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSGetAllTemplatesCompleted(this, new LSGetAllTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDMImage", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDMImage(string agendaFilename, string path, string user, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reportblob, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDMImage", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        reportblob,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAsync(string agendaFilename, string path, string user, string pass, byte[] reportblob, string extension) {
            this.LSArchiveMeetingToDMImageAsync(agendaFilename, path, user, pass, reportblob, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAsync(string agendaFilename, string path, string user, string pass, byte[] reportblob, string extension, object userState) {
            if ((this.LSArchiveMeetingToDMImageOperationCompleted == null)) {
                this.LSArchiveMeetingToDMImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDMImageOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDMImage", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        reportblob,
                        extension}, this.LSArchiveMeetingToDMImageOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDMImageOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDMImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDMImageCompleted(this, new LSArchiveMeetingToDMImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDMImageAppend", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDMImageAppend(string agendaFilename, string DocID, string user, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reportblob, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDMImageAppend", new object[] {
                        agendaFilename,
                        DocID,
                        user,
                        pass,
                        reportblob,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAppendAsync(string agendaFilename, string DocID, string user, string pass, byte[] reportblob, string extension) {
            this.LSArchiveMeetingToDMImageAppendAsync(agendaFilename, DocID, user, pass, reportblob, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAppendAsync(string agendaFilename, string DocID, string user, string pass, byte[] reportblob, string extension, object userState) {
            if ((this.LSArchiveMeetingToDMImageAppendOperationCompleted == null)) {
                this.LSArchiveMeetingToDMImageAppendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDMImageAppendOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDMImageAppend", new object[] {
                        agendaFilename,
                        DocID,
                        user,
                        pass,
                        reportblob,
                        extension}, this.LSArchiveMeetingToDMImageAppendOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDMImageAppendOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDMImageAppendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDMImageAppendCompleted(this, new LSArchiveMeetingToDMImageAppendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDM", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDM(string agendaFilename, string path, string user, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reportblob, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDM", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        reportblob,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMAsync(string agendaFilename, string path, string user, string pass, byte[] reportblob, string extension) {
            this.LSArchiveMeetingToDMAsync(agendaFilename, path, user, pass, reportblob, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMAsync(string agendaFilename, string path, string user, string pass, byte[] reportblob, string extension, object userState) {
            if ((this.LSArchiveMeetingToDMOperationCompleted == null)) {
                this.LSArchiveMeetingToDMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDMOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDM", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        reportblob,
                        extension}, this.LSArchiveMeetingToDMOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDMOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDMCompleted(this, new LSArchiveMeetingToDMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDMImage_File", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDMImage_File(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDMImage_File", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImage_FileAsync(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            this.LSArchiveMeetingToDMImage_FileAsync(agendaFilename, path, user, pass, useConfigPath, FolderPath, FileName, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImage_FileAsync(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension, object userState) {
            if ((this.LSArchiveMeetingToDMImage_FileOperationCompleted == null)) {
                this.LSArchiveMeetingToDMImage_FileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDMImage_FileOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDMImage_File", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension}, this.LSArchiveMeetingToDMImage_FileOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDMImage_FileOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDMImage_FileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDMImage_FileCompleted(this, new LSArchiveMeetingToDMImage_FileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDMImageAppend_File", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDMImageAppend_File(string agendaFilename, string DocID, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDMImageAppend_File", new object[] {
                        agendaFilename,
                        DocID,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAppend_FileAsync(string agendaFilename, string DocID, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            this.LSArchiveMeetingToDMImageAppend_FileAsync(agendaFilename, DocID, user, pass, useConfigPath, FolderPath, FileName, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDMImageAppend_FileAsync(string agendaFilename, string DocID, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension, object userState) {
            if ((this.LSArchiveMeetingToDMImageAppend_FileOperationCompleted == null)) {
                this.LSArchiveMeetingToDMImageAppend_FileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDMImageAppend_FileOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDMImageAppend_File", new object[] {
                        agendaFilename,
                        DocID,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension}, this.LSArchiveMeetingToDMImageAppend_FileOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDMImageAppend_FileOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDMImageAppend_FileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDMImageAppend_FileCompleted(this, new LSArchiveMeetingToDMImageAppend_FileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSArchiveMeetingToDM_File", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSArchiveMeetingToDM_File(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            object[] results = this.Invoke("LSArchiveMeetingToDM_File", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDM_FileAsync(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension) {
            this.LSArchiveMeetingToDM_FileAsync(agendaFilename, path, user, pass, useConfigPath, FolderPath, FileName, extension, null);
        }
        
        /// <remarks/>
        public void LSArchiveMeetingToDM_FileAsync(string agendaFilename, string path, string user, string pass, bool useConfigPath, string FolderPath, string FileName, string extension, object userState) {
            if ((this.LSArchiveMeetingToDM_FileOperationCompleted == null)) {
                this.LSArchiveMeetingToDM_FileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSArchiveMeetingToDM_FileOperationCompleted);
            }
            this.InvokeAsync("LSArchiveMeetingToDM_File", new object[] {
                        agendaFilename,
                        path,
                        user,
                        pass,
                        useConfigPath,
                        FolderPath,
                        FileName,
                        extension}, this.LSArchiveMeetingToDM_FileOperationCompleted, userState);
        }
        
        private void OnLSArchiveMeetingToDM_FileOperationCompleted(object arg) {
            if ((this.LSArchiveMeetingToDM_FileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSArchiveMeetingToDM_FileCompleted(this, new LSArchiveMeetingToDM_FileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSDeleteFile", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSDeleteFile(string FileName, string extension, bool useConfigPath, string FolderPath) {
            object[] results = this.Invoke("LSDeleteFile", new object[] {
                        FileName,
                        extension,
                        useConfigPath,
                        FolderPath});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSDeleteFileAsync(string FileName, string extension, bool useConfigPath, string FolderPath) {
            this.LSDeleteFileAsync(FileName, extension, useConfigPath, FolderPath, null);
        }
        
        /// <remarks/>
        public void LSDeleteFileAsync(string FileName, string extension, bool useConfigPath, string FolderPath, object userState) {
            if ((this.LSDeleteFileOperationCompleted == null)) {
                this.LSDeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSDeleteFileOperationCompleted);
            }
            this.InvokeAsync("LSDeleteFile", new object[] {
                        FileName,
                        extension,
                        useConfigPath,
                        FolderPath}, this.LSDeleteFileOperationCompleted, userState);
        }
        
        private void OnLSDeleteFileOperationCompleted(object arg) {
            if ((this.LSDeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSDeleteFileCompleted(this, new LSDeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSUploadFileChunk", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSUploadFileChunk(string agendaFilename, string path, string FileName, string user, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long Offset, string extension) {
            object[] results = this.Invoke("LSUploadFileChunk", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        buffer,
                        Offset,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSUploadFileChunkAsync(string agendaFilename, string path, string FileName, string user, string pass, byte[] buffer, long Offset, string extension) {
            this.LSUploadFileChunkAsync(agendaFilename, path, FileName, user, pass, buffer, Offset, extension, null);
        }
        
        /// <remarks/>
        public void LSUploadFileChunkAsync(string agendaFilename, string path, string FileName, string user, string pass, byte[] buffer, long Offset, string extension, object userState) {
            if ((this.LSUploadFileChunkOperationCompleted == null)) {
                this.LSUploadFileChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSUploadFileChunkOperationCompleted);
            }
            this.InvokeAsync("LSUploadFileChunk", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        buffer,
                        Offset,
                        extension}, this.LSUploadFileChunkOperationCompleted, userState);
        }
        
        private void OnLSUploadFileChunkOperationCompleted(object arg) {
            if ((this.LSUploadFileChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSUploadFileChunkCompleted(this, new LSUploadFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSImportImagesFromFile", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSImportImagesFromFile(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            object[] results = this.Invoke("LSImportImagesFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSImportImagesFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            this.LSImportImagesFromFileAsync(agendaFilename, path, FileName, user, pass, extension, null);
        }
        
        /// <remarks/>
        public void LSImportImagesFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension, object userState) {
            if ((this.LSImportImagesFromFileOperationCompleted == null)) {
                this.LSImportImagesFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSImportImagesFromFileOperationCompleted);
            }
            this.InvokeAsync("LSImportImagesFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension}, this.LSImportImagesFromFileOperationCompleted, userState);
        }
        
        private void OnLSImportImagesFromFileOperationCompleted(object arg) {
            if ((this.LSImportImagesFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSImportImagesFromFileCompleted(this, new LSImportImagesFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSImportImagesFromFileAppend", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSImportImagesFromFileAppend(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            object[] results = this.Invoke("LSImportImagesFromFileAppend", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSImportImagesFromFileAppendAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            this.LSImportImagesFromFileAppendAsync(agendaFilename, path, FileName, user, pass, extension, null);
        }
        
        /// <remarks/>
        public void LSImportImagesFromFileAppendAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension, object userState) {
            if ((this.LSImportImagesFromFileAppendOperationCompleted == null)) {
                this.LSImportImagesFromFileAppendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSImportImagesFromFileAppendOperationCompleted);
            }
            this.InvokeAsync("LSImportImagesFromFileAppend", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension}, this.LSImportImagesFromFileAppendOperationCompleted, userState);
        }
        
        private void OnLSImportImagesFromFileAppendOperationCompleted(object arg) {
            if ((this.LSImportImagesFromFileAppendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSImportImagesFromFileAppendCompleted(this, new LSImportImagesFromFileAppendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSAppendImagesFromFile", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSAppendImagesFromFile(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            object[] results = this.Invoke("LSAppendImagesFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSAppendImagesFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            this.LSAppendImagesFromFileAsync(agendaFilename, path, FileName, user, pass, extension, null);
        }
        
        /// <remarks/>
        public void LSAppendImagesFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension, object userState) {
            if ((this.LSAppendImagesFromFileOperationCompleted == null)) {
                this.LSAppendImagesFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSAppendImagesFromFileOperationCompleted);
            }
            this.InvokeAsync("LSAppendImagesFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension}, this.LSAppendImagesFromFileOperationCompleted, userState);
        }
        
        private void OnLSAppendImagesFromFileOperationCompleted(object arg) {
            if ((this.LSAppendImagesFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSAppendImagesFromFileCompleted(this, new LSAppendImagesFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSImportEdocFromFile", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSImportEdocFromFile(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            object[] results = this.Invoke("LSImportEdocFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSImportEdocFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension) {
            this.LSImportEdocFromFileAsync(agendaFilename, path, FileName, user, pass, extension, null);
        }
        
        /// <remarks/>
        public void LSImportEdocFromFileAsync(string agendaFilename, string path, string FileName, string user, string pass, string extension, object userState) {
            if ((this.LSImportEdocFromFileOperationCompleted == null)) {
                this.LSImportEdocFromFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSImportEdocFromFileOperationCompleted);
            }
            this.InvokeAsync("LSImportEdocFromFile", new object[] {
                        agendaFilename,
                        path,
                        FileName,
                        user,
                        pass,
                        extension}, this.LSImportEdocFromFileOperationCompleted, userState);
        }
        
        private void OnLSImportEdocFromFileOperationCompleted(object arg) {
            if ((this.LSImportEdocFromFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSImportEdocFromFileCompleted(this, new LSImportEdocFromFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/LSDocumentLink", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Message LSDocumentLink(string user, string pass, int ParentDoc, int ChildDoc, string SourceRelation) {
            object[] results = this.Invoke("LSDocumentLink", new object[] {
                        user,
                        pass,
                        ParentDoc,
                        ChildDoc,
                        SourceRelation});
            return ((Message)(results[0]));
        }
        
        /// <remarks/>
        public void LSDocumentLinkAsync(string user, string pass, int ParentDoc, int ChildDoc, string SourceRelation) {
            this.LSDocumentLinkAsync(user, pass, ParentDoc, ChildDoc, SourceRelation, null);
        }
        
        /// <remarks/>
        public void LSDocumentLinkAsync(string user, string pass, int ParentDoc, int ChildDoc, string SourceRelation, object userState) {
            if ((this.LSDocumentLinkOperationCompleted == null)) {
                this.LSDocumentLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLSDocumentLinkOperationCompleted);
            }
            this.InvokeAsync("LSDocumentLink", new object[] {
                        user,
                        pass,
                        ParentDoc,
                        ChildDoc,
                        SourceRelation}, this.LSDocumentLinkOperationCompleted, userState);
        }
        
        private void OnLSDocumentLinkOperationCompleted(object arg) {
            if ((this.LSDocumentLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LSDocumentLinkCompleted(this, new LSDocumentLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/GetDocumentExtensionByID", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentExtensionByID(int ID, string user, string pass) {
            object[] results = this.Invoke("GetDocumentExtensionByID", new object[] {
                        ID,
                        user,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentExtensionByIDAsync(int ID, string user, string pass) {
            this.GetDocumentExtensionByIDAsync(ID, user, pass, null);
        }
        
        /// <remarks/>
        public void GetDocumentExtensionByIDAsync(int ID, string user, string pass, object userState) {
            if ((this.GetDocumentExtensionByIDOperationCompleted == null)) {
                this.GetDocumentExtensionByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentExtensionByIDOperationCompleted);
            }
            this.InvokeAsync("GetDocumentExtensionByID", new object[] {
                        ID,
                        user,
                        pass}, this.GetDocumentExtensionByIDOperationCompleted, userState);
        }
        
        private void OnGetDocumentExtensionByIDOperationCompleted(object arg) {
            if ((this.GetDocumentExtensionByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentExtensionByIDCompleted(this, new GetDocumentExtensionByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mccinnovations.com/LSDMCWebService/GetDocumentEntryType", RequestElementName="GetDocumentEntryType", RequestNamespace="http://mccinnovations.com/LSDMCWebService", ResponseElementName="GetDocumentEntryTypeResponse", ResponseNamespace="http://mccinnovations.com/LSDMCWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDocumentEntryTypeResult")]
        public Entry GetDocumentEntryTypeByPath(string path, string user, string pass) {
            object[] results = this.Invoke("GetDocumentEntryTypeByPath", new object[] {
                        path,
                        user,
                        pass});
            return ((Entry)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentEntryTypeByPathAsync(string path, string user, string pass) {
            this.GetDocumentEntryTypeByPathAsync(path, user, pass, null);
        }
        
        /// <remarks/>
        public void GetDocumentEntryTypeByPathAsync(string path, string user, string pass, object userState) {
            if ((this.GetDocumentEntryTypeByPathOperationCompleted == null)) {
                this.GetDocumentEntryTypeByPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentEntryTypeByPathOperationCompleted);
            }
            this.InvokeAsync("GetDocumentEntryTypeByPath", new object[] {
                        path,
                        user,
                        pass}, this.GetDocumentEntryTypeByPathOperationCompleted, userState);
        }
        
        private void OnGetDocumentEntryTypeByPathOperationCompleted(object arg) {
            if ((this.GetDocumentEntryTypeByPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentEntryTypeByPathCompleted(this, new GetDocumentEntryTypeByPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mccinnovations.com/LSDMCWebService")]
    public partial class Message {
        
        private bool successField;
        
        private string messageField;
        
        private int docIdField;
        
        /// <remarks/>
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public int docId {
            get {
                return this.docIdField;
            }
            set {
                this.docIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mccinnovations.com/LSDMCWebService")]
    public partial class Template {
        
        private string nameField;
        
        private int idField;
        
        private int fieldCountField;
        
        private Field[] templateFieldsField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int FieldCount {
            get {
                return this.fieldCountField;
            }
            set {
                this.fieldCountField = value;
            }
        }
        
        /// <remarks/>
        public Field[] TemplateFields {
            get {
                return this.templateFieldsField;
            }
            set {
                this.templateFieldsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mccinnovations.com/LSDMCWebService")]
    public partial class Field {
        
        private string nameField;
        
        private Field_Type dataTypeField;
        
        private string field_Type_StringField;
        
        private int idField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public Field_Type DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Field_Type_String {
            get {
                return this.field_Type_StringField;
            }
            set {
                this.field_Type_StringField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mccinnovations.com/LSDMCWebService")]
    public enum Field_Type {
        
        /// <remarks/>
        FIELD_TYPE_UNKNOWN,
        
        /// <remarks/>
        FIELD_TYPE_STRING,
        
        /// <remarks/>
        FIELD_TYPE_LIST,
        
        /// <remarks/>
        FIELD_TYPE_NUMBER,
        
        /// <remarks/>
        FIELD_TYPE_LONG,
        
        /// <remarks/>
        FIELD_TYPE_SHORT,
        
        /// <remarks/>
        FIELD_TYPE_DATE,
        
        /// <remarks/>
        FIELD_TYPE_DATETIME,
        
        /// <remarks/>
        FIELD_TYPE_TIME,
        
        /// <remarks/>
        FIELD_TYPE_BLOB,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3221.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mccinnovations.com/LSDMCWebService")]
    public partial class Entry {
        
        private int idField;
        
        private string nameField;
        
        private string pathField;
        
        private string parentFolderField;
        
        private string typeField;
        
        private string creatorNameField;
        
        private System.DateTime createDateField;
        
        private string extensionField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string ParentFolder {
            get {
                return this.parentFolderField;
            }
            set {
                this.parentFolderField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string CreatorName {
            get {
                return this.creatorNameField;
            }
            set {
                this.creatorNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void ValidateCredentialsCompletedEventHandler(object sender, ValidateCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetRepositoryInfoCompletedEventHandler(object sender, GetRepositoryInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetEntriesFromParentCompletedEventHandler(object sender, GetEntriesFromParentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntriesFromParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntriesFromParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetDocumentFromDMOldCompletedEventHandler(object sender, LSGetDocumentFromDMOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetDocumentFromDMOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetDocumentFromDMOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetDocumentFromDMCompletedEventHandler(object sender, LSGetDocumentFromDMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetDocumentFromDMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetDocumentFromDMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSDeleteDocumentCompletedEventHandler(object sender, LSDeleteDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSDeleteDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSDeleteDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void UpdateFieldByNameCompletedEventHandler(object sender, UpdateFieldByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFieldByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFieldByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void UpdateTemplateByNameCompletedEventHandler(object sender, UpdateTemplateByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTemplateByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTemplateByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void UpdateTemplateByIDCompletedEventHandler(object sender, UpdateTemplateByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTemplateByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTemplateByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void UpdateFieldByIDCompletedEventHandler(object sender, UpdateFieldByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFieldByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFieldByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetAllFieldsCompletedEventHandler(object sender, LSGetAllFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetAllFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetAllFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Field[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Field[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetFieldsByTemplateNameCompletedEventHandler(object sender, LSGetFieldsByTemplateNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetFieldsByTemplateNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetFieldsByTemplateNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Field[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Field[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetFieldsByTemplateIDCompletedEventHandler(object sender, LSGetFieldsByTemplateIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetFieldsByTemplateIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetFieldsByTemplateIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Field[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Field[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSGetAllTemplatesCompletedEventHandler(object sender, LSGetAllTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSGetAllTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSGetAllTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Template[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDMImageCompletedEventHandler(object sender, LSArchiveMeetingToDMImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDMImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDMImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDMImageAppendCompletedEventHandler(object sender, LSArchiveMeetingToDMImageAppendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDMImageAppendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDMImageAppendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDMCompletedEventHandler(object sender, LSArchiveMeetingToDMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDMImage_FileCompletedEventHandler(object sender, LSArchiveMeetingToDMImage_FileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDMImage_FileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDMImage_FileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDMImageAppend_FileCompletedEventHandler(object sender, LSArchiveMeetingToDMImageAppend_FileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDMImageAppend_FileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDMImageAppend_FileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSArchiveMeetingToDM_FileCompletedEventHandler(object sender, LSArchiveMeetingToDM_FileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSArchiveMeetingToDM_FileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSArchiveMeetingToDM_FileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSDeleteFileCompletedEventHandler(object sender, LSDeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSDeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSDeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSUploadFileChunkCompletedEventHandler(object sender, LSUploadFileChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSUploadFileChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSUploadFileChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSImportImagesFromFileCompletedEventHandler(object sender, LSImportImagesFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSImportImagesFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSImportImagesFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSImportImagesFromFileAppendCompletedEventHandler(object sender, LSImportImagesFromFileAppendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSImportImagesFromFileAppendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSImportImagesFromFileAppendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSAppendImagesFromFileCompletedEventHandler(object sender, LSAppendImagesFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSAppendImagesFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSAppendImagesFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSImportEdocFromFileCompletedEventHandler(object sender, LSImportEdocFromFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSImportEdocFromFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSImportEdocFromFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void LSDocumentLinkCompletedEventHandler(object sender, LSDocumentLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LSDocumentLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LSDocumentLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Message Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Message)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetDocumentExtensionByIDCompletedEventHandler(object sender, GetDocumentExtensionByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentExtensionByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentExtensionByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    public delegate void GetDocumentEntryTypeByPathCompletedEventHandler(object sender, GetDocumentEntryTypeByPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentEntryTypeByPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentEntryTypeByPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Entry Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entry)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591